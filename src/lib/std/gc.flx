//$ Generic garbage collector interface.
//$ This class provides a generic interface to the GC,
//$ that is, one that is independent of the GC representation.
open class Gc
{
  //$ Invoke the garbage collector.
  proc collect() { svc svc_collect; }

  //$ Get the total number of bytes currently allocated.
  fun gc_get_allocation_amt : unit -> ulong = "PTF gcp->collector->get_allocation_amt()"
    requires property "needs_gc";

  //$ Get the total number of objects currently allocated.
  fun gc_get_allocation_count : unit -> ulong = "PTF gcp->collector->get_allocation_count()"
    requires property "needs_gc";

  //$ Get the total number of roots.
  fun gc_get_root_count : unit -> ulong = "PTF gcp->collector->get_root_count()"
    requires property "needs_gc";

  // Use Felix's GC to track pointers allocated by other libraries.
  proc add_foreign[T] : &T = "PTF gcp->collector->add_foreign((void *)$1, &@?1);"
    requires property "needs_gc";
  proc remove_foreign[T] : &T = "PTF gcp->collector->remove_foreign((void *)$1);"
    requires property "needs_gc";


}

